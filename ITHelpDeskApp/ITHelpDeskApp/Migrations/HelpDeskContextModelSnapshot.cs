// <auto-generated />
using System;
using ITHelpDeskApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITHelpDeskApp.Migrations
{
    [DbContext(typeof(HelpDeskContext))]
    partial class HelpDeskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ITHelpDeskApp.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<string>("AssignedToName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResolutionSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketNum")
                        .HasColumnType("int");

                    b.Property<string>("TicketTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            AssignedToName = "Sally Smith",
                            ClosedDate = new DateTime(2023, 10, 29, 19, 26, 8, 281, DateTimeKind.Local).AddTicks(3551),
                            CreatedBy = "Alberta Crocodile",
                            CreatedDate = new DateTime(2023, 10, 22, 15, 49, 8, 281, DateTimeKind.Local).AddTicks(3522),
                            Priority = "Medium",
                            ResolutionSummary = "HDMI cable that connected the monitor to the PC was busted. Replaced it with a new one.",
                            Status = "Closed",
                            TicketDescription = "The light on the tower turns on, but nothing ever shows up on the monitor. The monitor is on. Please help.",
                            TicketNum = 100,
                            TicketTitle = "Desktop won't turn on"
                        },
                        new
                        {
                            TicketId = 2,
                            AssignedToName = "Albert Gator",
                            ClosedDate = new DateTime(2023, 11, 4, 17, 37, 8, 281, DateTimeKind.Local).AddTicks(3557),
                            CreatedBy = "John Doe",
                            CreatedDate = new DateTime(2023, 11, 2, 15, 49, 8, 281, DateTimeKind.Local).AddTicks(3555),
                            Priority = "Low",
                            ResolutionSummary = "User was not connected to VPN. Once connected, the issue was resolved.",
                            Status = "Closed",
                            TicketDescription = "On Friday, I was able to connect to the Accounting server; however, now when I try to connect I receive a 'cannot connect to server' error message.",
                            TicketNum = 101,
                            TicketTitle = "Can't connect to internal Accounting server"
                        },
                        new
                        {
                            TicketId = 3,
                            AssignedToName = "Albert Gator",
                            CreatedBy = "Alberta Crocodile",
                            CreatedDate = new DateTime(2023, 11, 24, 13, 16, 8, 281, DateTimeKind.Local).AddTicks(3561),
                            Priority = "High",
                            ResolutionSummary = "",
                            Status = "Open",
                            TicketDescription = "Receiving a '404 error' on every webpage. This is an urgent request.",
                            TicketNum = 101,
                            TicketTitle = "Can't connect to Internet"
                        },
                        new
                        {
                            TicketId = 4,
                            AssignedToName = "Sally Smith",
                            CreatedBy = "John Doe",
                            CreatedDate = new DateTime(2023, 11, 23, 12, 49, 8, 281, DateTimeKind.Local).AddTicks(3564),
                            Priority = "Medium",
                            ResolutionSummary = "",
                            Status = "Open",
                            TicketDescription = "Hello, this is a request to purchase 2 licenses for Quickbooks Enterprise 2023. These licenses will be for the new hires starting next week.",
                            TicketNum = 101,
                            TicketTitle = "Request for new Quickbooks licenses"
                        });
                });

            modelBuilder.Entity("ITHelpDeskApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsItUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoggedInuser")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Department = "IT",
                            FirstName = "Sally",
                            IsItUser = true,
                            IsLoggedInuser = false,
                            LastName = "Smith",
                            Password = "ItPassword1",
                            Username = "ItUser1"
                        },
                        new
                        {
                            UserId = 2,
                            Department = "IT",
                            FirstName = "Albert",
                            IsItUser = true,
                            IsLoggedInuser = false,
                            LastName = "Gator",
                            Password = "ItPassword2",
                            Username = "ItUser2"
                        },
                        new
                        {
                            UserId = 3,
                            Department = "Accounting",
                            FirstName = "John",
                            IsItUser = false,
                            IsLoggedInuser = false,
                            LastName = "Doe",
                            Password = "NonItPassword1",
                            Username = "NonItUser1"
                        },
                        new
                        {
                            UserId = 4,
                            Department = "Support",
                            FirstName = "Alberta",
                            IsItUser = false,
                            IsLoggedInuser = false,
                            LastName = "Crocodile",
                            Password = "NonItPassword2",
                            Username = "NonItUser2"
                        });
                });

            modelBuilder.Entity("ITHelpDeskApp.Models.Ticket", b =>
                {
                    b.HasOne("ITHelpDeskApp.Models.User", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ITHelpDeskApp.Models.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
